# Patite Parser Example
# Calculator Language Definition

> (Start);

(Start):    '0'      => (Int.Zero);
(Int.Zero): '0'..'1' => (Int.Bin);
(Int.Zero): '2'..'7' => (Int.Oct);
(Int.Zero): '8'..'7' => (Int.Dec);
(Int.Zero): 'x'      => (Int.Hex.Start);
(Int.Zero): '.'      => (Real.Start);
(Int.Zero): 'e'      => (Exp.Start);
(Int.Zero): 'b' => [Binary];
(Int.Zero): 'o' => [Octal];
(Int.Zero): 'd' => [Decimal];
(Int.Zero) => [Decimal];

(Start):   '1'      => (Int.Bin);
(Int.Bin): '0'..'1' => (Int.Bin);
(Int.Bin): '2'..'7' => (Int.Oct);
(Int.Bin): '8'..'9' => (Int.Dec);
(Int.Bin): '.' => (Real.Start);
(Int.Bin): 'e' => (Exp.Start);
(Int.Bin): 'b' => [Binary];
(Int.Bin): 'o' => [Octal];
(Int.Bin): 'd' => [Decimal];
(Int.Bin) => [Decimal];

(Start):   '2'..'7' => (Int.Oct);
(Int.Oct): '0'..'7' => (Int.Oct);
(Int.Oct): '8'..'9' => (Int.Dec);
(Int.Oct): '.' => (Real.Start);
(Int.Oct): 'e' => (Exp.Start);
(Int.Oct): 'o' => [Octal];
(Int.Oct): 'd' => [Decimal];
(Int.Oct) => [Decimal];

(Start):   '8'..'9' => (Int.Dec);
(Int.Dec): '0'..'9' => (Int.Dec);
(Int.Dec): '.' => (Real.Start);
(Int.Dec): 'e' => (Exp.Start);
(Int.Dec): 'd' => [Decimal];
(Int.Dec) => [Decimal];

(Int.Hex.Start): '0'..'9', 'a'..'f', 'A'..'F' => (Int.Hex);
(Int.Hex): '0'..'9', 'a'..'f', 'A'..'F' => (Int.Hex);
(Int.Hex) => [Hexadecimal];

(Real.Start): '0'..'9' => (Real);
(Real): '0'..'9' => (Real);
(Real): 'e' => (Exp.Start);
(Real) => [Real];

(Exp.Start): '0'..'9' => (Exp);
(Exp.Start): '-', '+' => (Exp.Sign);
(Exp.Sign):  '0'..'9' => (Exp);
(Exp):       '0'..'9' => (Exp);
(Exp) => [Real];

(Start): 'a'..'z', 'A'..'Z', '_' => (Id);
(Id):    'a'..'z', 'A'..'Z', '0'..'9', '_' => [Id];

(Start): '*' => [Mul];
(Start): '/' => [Div];
(Start): '+' => [Pos];
(Start): '-' => [Negate];
(Start): '^' => [Power];
(Start): '~' => [Invert];
(Start): '!' => [Not];
(Start): '&' => [And];
(Start): '|' => [Or];
(Start): '(' => [Open];
(Start): ')' => [Close];
(Start): ',' => [Comma];
(Start): ' ' => (Whitespace): ' ' => ^[Whitespace];

> <Expression>;

<Expression> := <Term>
    | <Expression> [Pos] <Term> {Add}
    | <Expression> [Neg] <Term> {Subtract}
    | <Expression> [Or]  <Term> {Or};

<Term> := <Factor>
    | <Term> [Mul] <Factor> {Multiply}
    | <Term> [Div] <Factor> {Divide}
    | <Term> [And] <Factor> {And};

<Factor> := <Value>
    | <Factor> [Power] <Value> {Power}
    | [Open] <Expression> [Close]
    | [Negate] <Value> {Negate}
    | [Not] <Value> {Not}
    | [Pos] <Value>
    | [Invert] <Value> {Invert}
    | [Id] {StartCall} [Open] <Args> [Close] {Call};

<Value> := [Id] {Id}
    | [Binary] {Binary}
    | [Octal] {Octal}
    | [Decimal] {Decimal}
    | [Hexadecimal] {Hexadecimal}
    | [Real] {Real};

<Args> := _
    | <Expression>
    | <Args> [Comma] <Expression>;
