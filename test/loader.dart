part of PatiteParserDart.test;

void loader00(TestArgs args) {
  args.log('loader00');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["()"],
    ['Unexpected item, closeParen:2:")", in state 5. Expected: id.',
     'Unexpected item, eofToken:-1:"eofToken", in state 5. Expected: id.']);

  args.checkParser(parser, ["(Start)"],
    ['Unexpected item, eofToken:-1:"eofToken", in state 84. Expected: colon, arrow, semicolon.']);

  args.checkParser(parser, ["> (Start);"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─[closeAngle:1:">"]',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:3:"("]',
     '  │  │  ├─[id:8:"Start"]',
     '  │  │  ├─[closeParen:9:")"]',
     '  │  │  └─{new.state}',
     '  │  ├─{start.state}',
     '  │  └─<def.state.optional>',
     '  └─[semicolon:10:";"]']);

  args.checkParser(parser, ["> (Start): * => (Any);"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─[closeAngle:1:">"]',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:3:"("]',
     '  │  │  ├─[id:8:"Start"]',
     '  │  │  ├─[closeParen:9:")"]',
     '  │  │  └─{new.state}',
     '  │  ├─{start.state}',
     '  │  └─<def.state.optional>',
     '  │     └─<def.state>',
     '  │        ├─[colon:10:":"]',
     '  │        ├─<matcher.start>',
     '  │        │  ├─[any:12:"*"]',
     '  │        │  └─{match.any}',
     '  │        ├─[arrow:15:"=>"]',
     '  │        ├─<stateID>',
     '  │        │  ├─[openParen:17:"("]',
     '  │        │  ├─[id:20:"Any"]',
     '  │        │  ├─[closeParen:21:")"]',
     '  │        │  └─{new.state}',
     '  │        ├─{join.state}',
     '  │        └─<def.state.optional>',
     '  └─[semicolon:22:";"]']);
}
       
void loader01(TestArgs args) {
  args.log('loader01');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["(O): 'ab' => (AB): 'cde' => (CDE);"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:1:"("]',
     '  │  │  ├─[id:2:"O"]',
     '  │  │  ├─[closeParen:3:")"]',
     '  │  │  └─{new.state}',
     '  │  └─<def.state>',
     '  │     ├─[colon:4:":"]',
     '  │     ├─<matcher.start>',
     '  │     │  └─<matcher>',
     '  │     │     └─<charSetRange>',
     '  │     │        ├─[string:9:"ab"]',
     '  │     │        └─{match.set}',
     '  │     ├─[arrow:12:"=>"]',
     '  │     ├─<stateID>',
     '  │     │  ├─[openParen:14:"("]',
     '  │     │  ├─[id:16:"AB"]',
     '  │     │  ├─[closeParen:17:")"]',
     '  │     │  └─{new.state}',
     '  │     ├─{join.state}',
     '  │     └─<def.state.optional>',
     '  │        └─<def.state>',
     '  │           ├─[colon:18:":"]',
     '  │           ├─<matcher.start>',
     '  │           │  └─<matcher>',
     '  │           │     └─<charSetRange>',
     '  │           │        ├─[string:24:"cde"]',
     '  │           │        └─{match.set}',
     '  │           ├─[arrow:27:"=>"]',
     '  │           ├─<stateID>',
     '  │           │  ├─[openParen:29:"("]',
     '  │           │  ├─[id:32:"CDE"]',
     '  │           │  ├─[closeParen:33:")"]',
     '  │           │  └─{new.state}',
     '  │           ├─{join.state}',
     '  │           └─<def.state.optional>',
     '  └─[semicolon:34:";"]']);
}

void loader02(TestArgs args) {
  args.log('loader02');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser,
    ["(A)=>[A];",
     "(B)=>[B];"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  │  ├─<def.set>',
     '  │  ├─<def>',
     '  │  │  ├─{new.def}',
     '  │  │  ├─<stateID>',
     '  │  │  │  ├─[openParen:1:"("]',
     '  │  │  │  ├─[id:2:"A"]',
     '  │  │  │  ├─[closeParen:3:")"]',
     '  │  │  │  └─{new.state}',
     '  │  │  └─<def.state>',
     '  │  │     ├─[arrow:5:"=>"]',
     '  │  │     ├─<tokenStateID>',
     '  │  │     │  ├─[openBracket:6:"["]',
     '  │  │     │  ├─[id:7:"A"]',
     '  │  │     │  ├─[closeBracket:8:"]"]',
     '  │  │     │  └─{new.token.state}',
     '  │  │     ├─{assign.token}',
     '  │  │     └─<def.token.optional>',
     '  │  └─[semicolon:9:";"]',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:11:"("]',
     '  │  │  ├─[id:12:"B"]',
     '  │  │  ├─[closeParen:13:")"]',
     '  │  │  └─{new.state}',
     '  │  └─<def.state>',
     '  │     ├─[arrow:15:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[openBracket:16:"["]',
     '  │     │  ├─[id:17:"B"]',
     '  │     │  ├─[closeBracket:18:"]"]',
     '  │     │  └─{new.token.state}',
     '  │     ├─{assign.token}',
     '  │     └─<def.token.optional>',
     '  └─[semicolon:19:";"]']);
}

void loader03(TestArgs args) {
  args.log('loader03');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["(A): ^'a', 'c'..'f', !'abcd' => [D];"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:1:"("]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeParen:3:")"]',
     '  │  │  └─{new.state}',
     '  │  └─<def.state>',
     '  │     ├─[colon:4:":"]',
     '  │     ├─<matcher.start>',
     '  │     │  ├─[consume:6:"^"]',
     '  │     │  ├─<matcher>',
     '  │     │  │  ├─<matcher>',
     '  │     │  │  │  ├─<matcher>',
     '  │     │  │  │  │  └─<charSetRange>',
     '  │     │  │  │  │     ├─[string:9:"a"]',
     '  │     │  │  │  │     └─{match.set}',
     '  │     │  │  │  ├─[comma:10:","]',
     '  │     │  │  │  └─<charSetRange>',
     '  │     │  │  │     ├─[string:14:"c"]',
     '  │     │  │  │     ├─[range:16:".."]',
     '  │     │  │  │     ├─[string:19:"f"]',
     '  │     │  │  │     └─{match.range}',
     '  │     │  │  ├─[comma:20:","]',
     '  │     │  │  └─<charSetRange>',
     '  │     │  │     ├─[not:22:"!"]',
     '  │     │  │     ├─[string:28:"abcd"]',
     '  │     │  │     └─{match.set.not}',
     '  │     │  └─{match.consume}',
     '  │     ├─[arrow:31:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[openBracket:33:"["]',
     '  │     │  ├─[id:34:"D"]',
     '  │     │  ├─[closeBracket:35:"]"]',
     '  │     │  └─{new.token.state}',
     '  │     ├─{join.token}',
     '  │     └─<def.token.optional>',
     '  └─[semicolon:36:";"]']);
     
  args.checkParser(parser, ["(A): 'a\\x0A\\u00C2' => [D];"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:1:"("]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeParen:3:")"]',
     '  │  │  └─{new.state}',
     '  │  └─<def.state>',
     '  │     ├─[colon:4:":"]',
     '  │     ├─<matcher.start>',
     '  │     │  └─<matcher>',
     '  │     │     └─<charSetRange>',
     '  │     │        ├─[string:18:"a\\x0A\\u00C2"]',
     '  │     │        └─{match.set}',
     '  │     ├─[arrow:21:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[openBracket:23:"["]',
     '  │     │  ├─[id:24:"D"]',
     '  │     │  ├─[closeBracket:25:"]"]',
     '  │     │  └─{new.token.state}',
     '  │     ├─{join.token}',
     '  │     └─<def.token.optional>',
     '  └─[semicolon:26:";"]']);

  args.checkParser(parser, ["(A): !('a'..'z', '0'..'9') => [D];"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:1:"("]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeParen:3:")"]',
     '  │  │  └─{new.state}',
     '  │  └─<def.state>',
     '  │     ├─[colon:4:":"]',
     '  │     ├─<matcher.start>',
     '  │     │  └─<matcher>',
     '  │     │     └─<charSetRange>',
     '  │     │        ├─[not:6:"!"]',
     '  │     │        ├─[openParen:7:"("]',
     '  │     │        ├─{not.group.start}',
     '  │     │        ├─<matcher>',
     '  │     │        │  ├─<matcher>',
     '  │     │        │  │  └─<charSetRange>',
     '  │     │        │  │     ├─[string:10:"a"]',
     '  │     │        │  │     ├─[range:12:".."]',
     '  │     │        │  │     ├─[string:15:"z"]',
     '  │     │        │  │     └─{match.range}',
     '  │     │        │  ├─[comma:16:","]',
     '  │     │        │  └─<charSetRange>',
     '  │     │        │     ├─[string:20:"0"]',
     '  │     │        │     ├─[range:22:".."]',
     '  │     │        │     ├─[string:25:"9"]',
     '  │     │        │     └─{match.range}',
     '  │     │        ├─[closeParen:26:")"]',
     '  │     │        └─{not.group.end}',
     '  │     ├─[arrow:29:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[openBracket:31:"["]',
     '  │     │  ├─[id:32:"D"]',
     '  │     │  ├─[closeBracket:33:"]"]',
     '  │     │  └─{new.token.state}',
     '  │     ├─{join.token}',
     '  │     └─<def.token.optional>',
     '  └─[semicolon:34:";"]']);
}

void loader04(TestArgs args) {
  args.log('loader04');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["(A) => (D);"],
    ['Unexpected item, openParen:8:"(", in state 43. Expected: openBracket, consume.',
     'Unexpected item, id:9:"D", in state 43. Expected: openBracket, consume.',
     'Unexpected item, closeParen:10:")", in state 43. Expected: openBracket, consume.',
     'Unexpected item, semicolon:11:";", in state 43. Expected: openBracket, consume.',
     'Unexpected item, eofToken:-1:"eofToken", in state 43. Expected: openBracket, consume.']);

  args.checkParser(parser, ["> [D];"],
    ['Unexpected item, openBracket:3:"[", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, id:4:"D", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, closeBracket:5:"]", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, semicolon:6:";", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, eofToken:-1:"eofToken", in state 3. Expected: openParen, openAngle.']);

  args.checkParser(parser, ["(A) => ^[D];"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<stateID>',
     '  │  │  ├─[openParen:1:"("]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeParen:3:")"]',
     '  │  │  └─{new.state}',
     '  │  └─<def.state>',
     '  │     ├─[arrow:6:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[consume:8:"^"]',
     '  │     │  ├─[openBracket:9:"["]',
     '  │     │  ├─[id:10:"D"]',
     '  │     │  ├─[closeBracket:11:"]"]',
     '  │     │  └─{new.token.consume}',
     '  │     ├─{assign.token}',
     '  │     └─<def.token.optional>',
     '  └─[semicolon:12:";"]']);
}

void loader05(TestArgs args) {
  args.log('loader05');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ['[A]: "where" => [D];'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<tokenStateID>',
     '  │  │  ├─[openBracket:1:"["]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeBracket:3:"]"]',
     '  │  │  └─{new.token.state}',
     '  │  └─<def.token>',
     '  │     ├─[colon:4:":"]',
     '  │     ├─<replaceText>',
     '  │     │  ├─[string:12:"where"]',
     '  │     │  └─{add.replace.text}',
     '  │     ├─[arrow:15:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[openBracket:17:"["]',
     '  │     │  ├─[id:18:"D"]',
     '  │     │  ├─[closeBracket:19:"]"]',
     '  │     │  └─{new.token.state}',
     '  │     └─{replace.token}',
     '  └─[semicolon:20:";"]']);
     
  args.checkParser(parser, ['[A]: "is", "as", "if" => [D];'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<tokenStateID>',
     '  │  │  ├─[openBracket:1:"["]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeBracket:3:"]"]',
     '  │  │  └─{new.token.state}',
     '  │  └─<def.token>',
     '  │     ├─[colon:4:":"]',
     '  │     ├─<replaceText>',
     '  │     │  ├─<replaceText>',
     '  │     │  │  ├─<replaceText>',
     '  │     │  │  │  ├─[string:9:"is"]',
     '  │     │  │  │  └─{add.replace.text}',
     '  │     │  │  ├─[comma:10:","]',
     '  │     │  │  ├─[string:15:"as"]',
     '  │     │  │  └─{add.replace.text}',
     '  │     │  ├─[comma:16:","]',
     '  │     │  ├─[string:21:"if"]',
     '  │     │  └─{add.replace.text}',
     '  │     ├─[arrow:24:"=>"]',
     '  │     ├─<tokenStateID>',
     '  │     │  ├─[openBracket:26:"["]',
     '  │     │  ├─[id:27:"D"]',
     '  │     │  ├─[closeBracket:28:"]"]',
     '  │     │  └─{new.token.state}',
     '  │     └─{replace.token}',
     '  └─[semicolon:29:";"]']);
}

void loader06(TestArgs args) {
  args.log('loader06');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ['> <apple>;'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─[closeAngle:1:">"]',
     '  │  ├─<termID>',
     '  │  │  ├─[openAngle:3:"<"]',
     '  │  │  ├─[id:8:"apple"]',
     '  │  │  ├─[closeAngle:9:">"]',
     '  │  │  └─{new.term}',
     '  │  ├─{start.term}',
     '  │  └─<start.rule.optional>',
     '  └─[semicolon:10:";"]']);

  args.checkParser(parser, ['> <apple> := _;'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─[closeAngle:1:">"]',
     '  │  ├─<termID>',
     '  │  │  ├─[openAngle:3:"<"]',
     '  │  │  ├─[id:8:"apple"]',
     '  │  │  ├─[closeAngle:9:">"]',
     '  │  │  └─{new.term}',
     '  │  ├─{start.term}',
     '  │  └─<start.rule.optional>',
     '  │     ├─[assign:12:":="]',
     '  │     ├─{start.rule}',
     '  │     ├─<start.rule>',
     '  │     │  └─[lambda:14:"_"]',
     '  │     └─<next.rule.optional>',
     '  └─[semicolon:15:";"]']);
    
  args.checkParser(parser, ['<apple> := _;'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<termID>',
     '  │  │  ├─[openAngle:1:"<"]',
     '  │  │  ├─[id:6:"apple"]',
     '  │  │  ├─[closeAngle:7:">"]',
     '  │  │  └─{new.term}',
     '  │  ├─[assign:10:":="]',
     '  │  ├─{start.rule}',
     '  │  ├─<start.rule>',
     '  │  │  └─[lambda:12:"_"]',
     '  │  └─<next.rule.optional>',
     '  └─[semicolon:13:";"]']);
}

void loader07(TestArgs args) {
  args.log('loader07');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ['<A> := [B] <C> [D] {E};'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<termID>',
     '  │  │  ├─[openAngle:1:"<"]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeAngle:3:">"]',
     '  │  │  └─{new.term}',
     '  │  ├─[assign:6:":="]',
     '  │  ├─{start.rule}',
     '  │  ├─<start.rule>',
     '  │  │  ├─<tokenItemID>',
     '  │  │  │  ├─[openBracket:8:"["]',
     '  │  │  │  ├─[id:9:"B"]',
     '  │  │  │  ├─[closeBracket:10:"]"]',
     '  │  │  │  └─{new.token.item}',
     '  │  │  ├─{item.token}',
     '  │  │  └─<rule.item>',
     '  │  │     ├─<rule.item>',
     '  │  │     │  ├─<rule.item>',
     '  │  │     │  │  ├─<rule.item>',
     '  │  │     │  │  ├─<termID>',
     '  │  │     │  │  │  ├─[openAngle:12:"<"]',
     '  │  │     │  │  │  ├─[id:13:"C"]',
     '  │  │     │  │  │  ├─[closeAngle:14:">"]',
     '  │  │     │  │  │  └─{new.term}',
     '  │  │     │  │  └─{item.term}',
     '  │  │     │  ├─<tokenItemID>',
     '  │  │     │  │  ├─[openBracket:16:"["]',
     '  │  │     │  │  ├─[id:17:"D"]',
     '  │  │     │  │  ├─[closeBracket:18:"]"]',
     '  │  │     │  │  └─{new.token.item}',
     '  │  │     │  └─{item.token}',
     '  │  │     ├─<triggerID>',
     '  │  │     │  ├─[openCurly:20:"{"]',
     '  │  │     │  ├─[id:21:"E"]',
     '  │  │     │  ├─[closeCurly:22:"}"]',
     '  │  │     │  └─{new.trigger}',
     '  │  │     └─{item.trigger}',
     '  │  └─<next.rule.optional>',
     '  └─[semicolon:23:";"]']);

  args.checkParser(parser, ['<A> := _ | <B> | [C];'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  ├─<def>',
     '  │  ├─{new.def}',
     '  │  ├─<termID>',
     '  │  │  ├─[openAngle:1:"<"]',
     '  │  │  ├─[id:2:"A"]',
     '  │  │  ├─[closeAngle:3:">"]',
     '  │  │  └─{new.term}',
     '  │  ├─[assign:6:":="]',
     '  │  ├─{start.rule}',
     '  │  ├─<start.rule>',
     '  │  │  └─[lambda:8:"_"]',
     '  │  └─<next.rule.optional>',
     '  │     ├─<next.rule.optional>',
     '  │     │  ├─<next.rule.optional>',
     '  │     │  ├─[or:10:"|"]',
     '  │     │  ├─{start.rule}',
     '  │     │  └─<start.rule>',
     '  │     │     ├─<termID>',
     '  │     │     │  ├─[openAngle:12:"<"]',
     '  │     │     │  ├─[id:13:"B"]',
     '  │     │     │  ├─[closeAngle:14:">"]',
     '  │     │     │  └─{new.term}',
     '  │     │     ├─{item.term}',
     '  │     │     └─<rule.item>',
     '  │     ├─[or:16:"|"]',
     '  │     ├─{start.rule}',
     '  │     └─<start.rule>',
     '  │        ├─<tokenItemID>',
     '  │        │  ├─[openBracket:18:"["]',
     '  │        │  ├─[id:19:"C"]',
     '  │        │  ├─[closeBracket:20:"]"]',
     '  │        │  └─{new.token.item}',
     '  │        ├─{item.token}',
     '  │        └─<rule.item>',
     '  └─[semicolon:21:";"]']);
}

void loader08(TestArgs args) {
  args.log('loader08');
  Parser.Parser parser = new Parser.Parser.fromDefinition(
    ["> (Start): '0'..'9' => (Num): '0'..'9' => [Num];",
     "(Start): 'a'..'z', 'A'..'Z' => (Var): 'a'..'z', 'A'..'Z', '0'..'9' => [Var];",
     "(Start): '*' => [Mul];",
     "(Start): '+' => [Add];",
     "(Start): '-' => [Sub];",
     "(Start): '/' => [Div];",
     "(Start): '(' => [Open];",
     "(Start): ')' => [Close];",
     "(Start): ' ' => (Whitespace): ' ' => ^[Whitespace];",
     "> <Expression> := <Expression> [Add] <Term> | <Expression> [Sub] <Term> | <Term>;",
     "<Term> := <Term> [Mul] <Factor> | <Term> [Div] <Factor> | <Factor>;",
     "<Factor> := [Open] <Expression> [Close] | [Num] | [Var];"].join('\n'));
     
  args.checkParser(parser, ['4 + 3 * pi'],
    ['─<Expression>',
     '  ├─<Expression>',
     '  │  └─<Term>',
     '  │     └─<Factor>',
     '  │        └─[Num:1:"4"]',
     '  ├─[Add:3:"+"]',
     '  └─<Term>',
     '     ├─<Term>',
     '     │  └─<Factor>',
     '     │     └─[Num:5:"3"]',
     '     ├─[Mul:7:"*"]',
     '     └─<Factor>',
     '        └─[Var:10:"pi"]']);
}

void loader09(TestArgs args) {
  args.log('loader09');
   Parser.Parser parser = new Parser.Parser.fromDefinition(
    ["> (Start): '\\n' => (First): '\\t' => (Second): '\\x0A' => (Third): '\\u000A' => (Forth): '\\\\' => [Symbol];",
     "(Start): ' ' => (Whitespace): ' ' => ^[Whitespace];",
     "> <E> := [Symbol];",
     "<E> := <E> [Symbol];"].join('\n'));
     
  args.checkParser(parser, ['\n\t\n\n\\'],
    ['─<E>',
     '  └─[Symbol:5:"\\n\\t\\n\\n\\"]']);
}
