part of PatiteParserDart.test;

void loader00(TestArgs args) {
  args.log('loader00');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["()"],
    ['Unexpected item, closeParen:2:")", in state 5. Expected: id.',
     'Unexpected item, eofToken:-1:"eofToken", in state 5. Expected: id.']);

  args.checkParser(parser, ["(Start)"],
    ['Unexpected item, eofToken:-1:"eofToken", in state 4. Expected: colon, arrow.']);

  args.checkParser(parser, ["> (Start)"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─[closeAngle:1:">"]',
     '     ├─<stateID>',
     '     │  ├─[openParen:3:"("]',
     '     │  ├─[id:8:"Start"]',
     '     │  ├─[closeParen:9:")"]',
     '     │  └─{new.state}',
     '     ├─{start.state}',
     '     └─<def.state.optional>']);

  args.checkParser(parser, ["> (Start): * => (Any)"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─[closeAngle:1:">"]',
     '     ├─<stateID>',
     '     │  ├─[openParen:3:"("]',
     '     │  ├─[id:8:"Start"]',
     '     │  ├─[closeParen:9:")"]',
     '     │  └─{new.state}',
     '     ├─{start.state}',
     '     └─<def.state.optional>',
     '        └─<def.state>',
     '           ├─[colon:10:":"]',
     '           ├─<matcher.start>',
     '           │  ├─[any:12:"*"]',
     '           │  └─{match.any}',
     '           ├─[arrow:15:"=>"]',
     '           ├─<stateID>',
     '           │  ├─[openParen:17:"("]',
     '           │  ├─[id:20:"Any"]',
     '           │  ├─[closeParen:21:")"]',
     '           │  └─{new.state}',
     '           ├─{join.state}',
     '           └─<def.state.optional>']);
}
       
void loader01(TestArgs args) {
  args.log('loader01');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["(O): 'ab' => (AB): 'cde' => (CDE)"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<stateID>',
     '     │  ├─[openParen:1:"("]',
     '     │  ├─[id:2:"O"]',
     '     │  ├─[closeParen:3:")"]',
     '     │  └─{new.state}',
     '     └─<def.state>',
     '        ├─[colon:4:":"]',
     '        ├─<matcher.start>',
     '        │  ├─<matcher>',
     '        │  │  └─<charSetRange>',
     '        │  │     ├─[charSet:9:"\'ab\'"]',
     '        │  │     └─{match.set}',
     '        │  └─{match}',
     '        ├─[arrow:12:"=>"]',
     '        ├─<stateID>',
     '        │  ├─[openParen:14:"("]',
     '        │  ├─[id:16:"AB"]',
     '        │  ├─[closeParen:17:")"]',
     '        │  └─{new.state}',
     '        ├─{join.state}',
     '        └─<def.state.optional>',
     '           └─<def.state>',
     '              ├─[colon:18:":"]',
     '              ├─<matcher.start>',
     '              │  ├─<matcher>',
     '              │  │  └─<charSetRange>',
     '              │  │     ├─[charSet:24:"\'cde\'"]',
     '              │  │     └─{match.set}',
     '              │  └─{match}',
     '              ├─[arrow:27:"=>"]',
     '              ├─<stateID>',
     '              │  ├─[openParen:29:"("]',
     '              │  ├─[id:32:"CDE"]',
     '              │  ├─[closeParen:33:")"]',
     '              │  └─{new.state}',
     '              ├─{join.state}',
     '              └─<def.state.optional>']);
}

void loader02(TestArgs args) {
  args.log('loader02');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser,
    ["(A)=>[A]",
     "(B)=>[B]"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  │  ├─<def.set>',
     '  │  └─<def>',
     '  │     ├─{new.def}',
     '  │     ├─<stateID>',
     '  │     │  ├─[openParen:1:"("]',
     '  │     │  ├─[id:2:"A"]',
     '  │     │  ├─[closeParen:3:")"]',
     '  │     │  └─{new.state}',
     '  │     └─<def.state>',
     '  │        ├─[arrow:5:"=>"]',
     '  │        ├─<tokenID>',
     '  │        │  ├─[openBracket:6:"["]',
     '  │        │  ├─[id:7:"A"]',
     '  │        │  ├─[closeBracket:8:"]"]',
     '  │        │  └─{new.token}',
     '  │        ├─{assign.token}',
     '  │        └─<def.token.optional>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<stateID>',
     '     │  ├─[openParen:10:"("]',
     '     │  ├─[id:11:"B"]',
     '     │  ├─[closeParen:12:")"]',
     '     │  └─{new.state}',
     '     └─<def.state>',
     '        ├─[arrow:14:"=>"]',
     '        ├─<tokenID>',
     '        │  ├─[openBracket:15:"["]',
     '        │  ├─[id:16:"B"]',
     '        │  ├─[closeBracket:17:"]"]',
     '        │  └─{new.token}',
     '        ├─{assign.token}',
     '        └─<def.token.optional>']);
}

void loader03(TestArgs args) {
  args.log('loader03');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["(A): ^'a', 'c'..'f', !'abcd' => [D]"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<stateID>',
     '     │  ├─[openParen:1:"("]',
     '     │  ├─[id:2:"A"]',
     '     │  ├─[closeParen:3:")"]',
     '     │  └─{new.state}',
     '     └─<def.state>',
     '        ├─[colon:4:":"]',
     '        ├─<matcher.start>',
     '        │  ├─[consume:6:"^"]',
     '        │  ├─<matcher>',
     '        │  │  ├─<matcher>',
     '        │  │  │  ├─<matcher>',
     '        │  │  │  │  └─<charSetRange>',
     '        │  │  │  │     ├─[charSet:9:"\'a\'"]',
     '        │  │  │  │     └─{match.set}',
     '        │  │  │  ├─[comma:10:","]',
     '        │  │  │  └─<charSetRange>',
     '        │  │  │     ├─[charSet:14:"\'c\'"]',
     '        │  │  │     ├─[range:16:".."]',
     '        │  │  │     ├─[charSet:19:"\'f\'"]',
     '        │  │  │     └─{match.range}',
     '        │  │  ├─[comma:20:","]',
     '        │  │  └─<charSetRange>',
     '        │  │     ├─[not:22:"!"]',
     '        │  │     ├─[charSet:28:"\'abcd\'"]',
     '        │  │     └─{match.set.not}',
     '        │  └─{match.consume}',
     '        ├─[arrow:31:"=>"]',
     '        ├─<tokenID>',
     '        │  ├─[openBracket:33:"["]',
     '        │  ├─[id:34:"D"]',
     '        │  ├─[closeBracket:35:"]"]',
     '        │  └─{new.token}',
     '        ├─{join.token}',
     '        └─<def.token.optional>']);
     
  args.checkParser(parser, ["(A): 'a\\x0A\\u00C2' => [D]"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<stateID>',
     '     │  ├─[openParen:1:"("]',
     '     │  ├─[id:2:"A"]',
     '     │  ├─[closeParen:3:")"]',
     '     │  └─{new.state}',
     '     └─<def.state>',
     '        ├─[colon:4:":"]',
     '        ├─<matcher.start>',
     '        │  ├─<matcher>',
     '        │  │  └─<charSetRange>',
     '        │  │     ├─[charSet:18:"\'a\\x0A\\u00C2\'"]',
     '        │  │     └─{match.set}',
     '        │  └─{match}',
     '        ├─[arrow:21:"=>"]',
     '        ├─<tokenID>',
     '        │  ├─[openBracket:23:"["]',
     '        │  ├─[id:24:"D"]',
     '        │  ├─[closeBracket:25:"]"]',
     '        │  └─{new.token}',
     '        ├─{join.token}',
     '        └─<def.token.optional>']);
}

void loader04(TestArgs args) {
  args.log('loader04');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ["(A) => (D)"],
    ['Unexpected item, openParen:8:"(", in state 40. Expected: openBracket, consume.',
     'Unexpected item, id:9:"D", in state 40. Expected: openBracket, consume.',
     'Unexpected item, closeParen:10:")", in state 40. Expected: openBracket, consume.',
     'Unexpected item, eofToken:-1:"eofToken", in state 40. Expected: openBracket, consume.']);

  args.checkParser(parser, ["> [D]"],
    ['Unexpected item, openBracket:3:"[", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, id:4:"D", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, closeBracket:5:"]", in state 3. Expected: openParen, openAngle.',
     'Unexpected item, eofToken:-1:"eofToken", in state 3. Expected: openParen, openAngle.']);

  args.checkParser(parser, ["(A) => ^[D]"],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<stateID>',
     '     │  ├─[openParen:1:"("]',
     '     │  ├─[id:2:"A"]',
     '     │  ├─[closeParen:3:")"]',
     '     │  └─{new.state}',
     '     └─<def.state>',
     '        ├─[arrow:6:"=>"]',
     '        ├─<tokenID>',
     '        │  ├─[consume:8:"^"]',
     '        │  ├─[openBracket:9:"["]',
     '        │  ├─[id:10:"D"]',
     '        │  ├─[closeBracket:11:"]"]',
     '        │  └─{new.token.consume}',
     '        ├─{assign.token}',
     '        └─<def.token.optional>']);
}

void loader05(TestArgs args) {
  args.log('loader05');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ['[A]: "where" => [D]'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<tokenID>',
     '     │  ├─[openBracket:1:"["]',
     '     │  ├─[id:2:"A"]',
     '     │  ├─[closeBracket:3:"]"]',
     '     │  └─{new.token}',
     '     └─<def.token>',
     '        ├─[colon:4:":"]',
     '        ├─[string:12:""where""]',
     '        ├─[arrow:15:"=>"]',
     '        ├─<tokenID>',
     '        │  ├─[openBracket:17:"["]',
     '        │  ├─[id:18:"D"]',
     '        │  ├─[closeBracket:19:"]"]',
     '        │  └─{new.token}',
     '        └─{replace.token}']);
}

void loader06(TestArgs args) {
  args.log('loader06');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ['> <apple>'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─[closeAngle:1:">"]',
     '     ├─<termID>',
     '     │  ├─[openAngle:3:"<"]',
     '     │  ├─[id:8:"apple"]',
     '     │  ├─[closeAngle:9:">"]',
     '     │  └─{new.term}',
     '     ├─{start.term}',
     '     └─<start.rule.optional>']);

  args.checkParser(parser, ['> <apple> := _'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─[closeAngle:1:">"]',
     '     ├─<termID>',
     '     │  ├─[openAngle:3:"<"]',
     '     │  ├─[id:8:"apple"]',
     '     │  ├─[closeAngle:9:">"]',
     '     │  └─{new.term}',
     '     ├─{start.term}',
     '     └─<start.rule.optional>',
     '        ├─[assign:12:":="]',
     '        ├─{start.rule}',
     '        ├─<start.rule>',
     '        │  └─[lambda:14:"_"]',
     '        └─<next.rule.optional>']);
    
  args.checkParser(parser, ['<apple> := _'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<termID>',
     '     │  ├─[openAngle:1:"<"]',
     '     │  ├─[id:6:"apple"]',
     '     │  ├─[closeAngle:7:">"]',
     '     │  └─{new.term}',
     '     ├─[assign:10:":="]',
     '     ├─<start.rule>',
     '     │  └─[lambda:12:"_"]',
     '     └─<next.rule.optional>']);
}

void loader07(TestArgs args) {
  args.log('loader07');
  Parser.Parser parser = Parser.Loader.getParser();
  args.checkParser(parser, ['<A> := [B] <C> [D] {E}'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<termID>',
     '     │  ├─[openAngle:1:"<"]',
     '     │  ├─[id:2:"A"]',
     '     │  ├─[closeAngle:3:">"]',
     '     │  └─{new.term}',
     '     ├─[assign:6:":="]',
     '     ├─<start.rule>',
     '     │  ├─<tokenID>',
     '     │  │  ├─[openBracket:8:"["]',
     '     │  │  ├─[id:9:"B"]',
     '     │  │  ├─[closeBracket:10:"]"]',
     '     │  │  └─{new.token}',
     '     │  ├─{item.token}',
     '     │  └─<rule.item>',
     '     │     ├─<rule.item>',
     '     │     │  ├─<rule.item>',
     '     │     │  │  ├─<rule.item>',
     '     │     │  │  ├─<termID>',
     '     │     │  │  │  ├─[openAngle:12:"<"]',
     '     │     │  │  │  ├─[id:13:"C"]',
     '     │     │  │  │  ├─[closeAngle:14:">"]',
     '     │     │  │  │  └─{new.term}',
     '     │     │  │  └─{item.term}',
     '     │     │  ├─<tokenID>',
     '     │     │  │  ├─[openBracket:16:"["]',
     '     │     │  │  ├─[id:17:"D"]',
     '     │     │  │  ├─[closeBracket:18:"]"]',
     '     │     │  │  └─{new.token}',
     '     │     │  └─{item.token}',
     '     │     ├─<triggerID>',
     '     │     │  ├─[openCurly:20:"{"]',
     '     │     │  ├─[id:21:"E"]',
     '     │     │  ├─[closeCurly:22:"}"]',
     '     │     │  └─{new.trigger}',
     '     │     └─{item.trigger}',
     '     └─<next.rule.optional>']);

  args.checkParser(parser, ['<A> := _ | <B> | [C]'],
    ['─<def.set>',
     '  ├─<def.set>',
     '  └─<def>',
     '     ├─{new.def}',
     '     ├─<termID>',
     '     │  ├─[openAngle:1:"<"]',
     '     │  ├─[id:2:"A"]',
     '     │  ├─[closeAngle:3:">"]',
     '     │  └─{new.term}',
     '     ├─[assign:6:":="]',
     '     ├─<start.rule>',
     '     │  └─[lambda:8:"_"]',
     '     └─<next.rule.optional>',
     '        ├─<next.rule.optional>',
     '        │  ├─<next.rule.optional>',
     '        │  ├─[or:10:"|"]',
     '        │  ├─{start.rule}',
     '        │  └─<start.rule>',
     '        │     ├─<termID>',
     '        │     │  ├─[openAngle:12:"<"]',
     '        │     │  ├─[id:13:"B"]',
     '        │     │  ├─[closeAngle:14:">"]',
     '        │     │  └─{new.term}',
     '        │     ├─{item.term}',
     '        │     └─<rule.item>',
     '        ├─[or:16:"|"]',
     '        ├─{start.rule}',
     '        └─<start.rule>',
     '           ├─<tokenID>',
     '           │  ├─[openBracket:18:"["]',
     '           │  ├─[id:19:"C"]',
     '           │  ├─[closeBracket:20:"]"]',
     '           │  └─{new.token}',
     '           ├─{item.token}',
     '           └─<rule.item>']);
}
